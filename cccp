#!/bin/bash

USAGE="
cccp - Crowd Control Copy

Usage:
    $(basename $0) [arguments] <source> <destination>

Arguments:
    -A <lock-dir>
        Create the lock files in <lock-dir> instead of at the source.
    -D  Create the lock files at the destination instead of the source.
    -h  Show this help text and exit.
"

LOCKDIR=""
LOCKMODE="SOURCE"

OPTIND=1
while getopts "A:Dh" opt
do
    case "$opt" in
        A)
            LOCKDIR="$OPTARG"
            LOCKMODE="ARBITER"
            if [ ! -d "$LOCKDIR" ]
            then
                echo "$USAGE"
                exit 1;
            fi
            ;;
        D)
            LOCKMODE="DESTINATION"
            ;;
        h)
            echo "$USAGE"
            exit 0
            ;;
        '?')
            echo "$USAGE"
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.


if [ $# -lt 2 ]
then
    echo "$USAGE"
    exit 1
fi

LOCKFILE=""
TICKETFILE=""
rmlocks()
{
    echo "Removing locks..."
    if [ -f "$LOCKFILE" ]
    then
        rm "$LOCKFILE"
    fi
    if [ -f "$TICKETFILE" ]
    then
        rm "$TICKETFILE"
    fi
}

trap 'echo "Aborting..."; rmlocks; trap - EXIT; trap - HUP; kill -HUP $$;' HUP
trap 'echo "Aborting..."; rmlocks; trap - EXIT; trap - INT; kill -INT $$;' INT
trap 'echo "Aborting..."; rmlocks; trap - EXIT; trap - TERM; kill -TERM $$;' TERM
trap 'rmlocks' EXIT

case $LOCKMODE in
    SOURCE)
        SRCDIR=$(dirname "$1")
        LOCKDIR=$SRCDIR/.cccp
        mkdir -p "$LOCKDIR"
        ;;
    DESTINATION)
        if [[ "$2" == */ ]]
        then
            DSTDIR="$2"
        else
            DSTDIR=$(dirname "$2")
        fi
        LOCKDIR=$DSTDIR/.cccp
        mkdir -p "$LOCKDIR"
        ;;
    ARBITER)
        ;;
esac

# Broadcast that we would like to copy a file
TICKETFILE="$LOCKDIR/cccp-ticket-$(hostname)-$RANDOM"
touch "$TICKETFILE"

sleep 1

# Check how many other processes are copying or want to copy
MAXLOCKS=5
function count_locks(){
    TMP=$(mktemp)
    find $LOCKDIR -maxdepth 1 -mmin -360 -name 'cccp-lock-*' >$TMP
    if [ $? -ne 0 ]
    then
        LOCKS=$MAXLOCKS
    else
        LOCKS=$( wc -l $TMP | cut -d ' ' -f 1 )
    fi
    rm $TMP
}
function count_tickets(){
    TMP=$(mktemp)
    find $LOCKDIR -maxdepth 1 -mmin -360 -name 'cccp-ticket-*' >$TMP
    if [ $? -ne 0 ]
    then
        TICKETS=$MAXLOCKS
    else
        TICKETS=$( wc -l $TMP | cut -d ' ' -f 1 )
    fi
    rm $TMP
}
function count_fresh_tickets(){
    TMP=$(mktemp)
    find $LOCKDIR -maxdepth 1 -mmin -1 -name 'cccp-ticket-*' >$TMP
    if [ $? -ne 0 ]
    then
        TICKETS=$MAXLOCKS
    else
        TICKETS=$( wc -l $TMP | cut -d ' ' -f 1 )
    fi
    rm $TMP
}

count_fresh_tickets
sleep $(( RANDOM % TICKETS ))
count_locks

echo "Waiting for free lock..."

while [ "$LOCKS" -ge "$MAXLOCKS" ]
do
    # If we cannot copy yet, wait an amount of time proportional to the number of waiting processes
    count_tickets
    sleep $(( 5 + $RANDOM % ($TICKETS * 10) ))
    # Make sure the ticket is still there and fresh
    touch "$TICKETFILE"
    count_locks
done

echo "Starting copy operation..."

LOCKFILE="$LOCKDIR/cccp-lock-$(hostname)-$RANDOM"
touch "$LOCKFILE"
cp -v "$1" "$2" || exit 1
echo "Done."
